#!/usr/bin/env bash

[[ "$DEBUG" == "true" ]] && set -x

exitCode=0

log() {
	[[ "$VERBOSE" == "true" ]] && echo "$@"
}

error() {
	>&2 echo "$@"
}

errorExitNow() {
	error "$@"
	exit 1
}

errorExitLater() {
	error "$@"
	exitCode=1
}

[[ -z "$TARGET_DOMAIN_PORT_IPS" && -z "$SMTP_TARGET_DOMAIN_PORT_IPS" ]] && errorExitNow TARGET_DOMAIN_PORT_IPS and/or SMTP_TARGET_DOMAIN_PORT_IPS must be defined

writeLog=error
[[ "$EXIT_ON_ERROR" = "first" ]] && writeLog=errorExitNow
[[ "$EXIT_ON_ERROR" = "end" ]] && writeLog=errorExitLater

warningDays=15
[[ "$WARNING_DAYS" =~ ^[1-9][0-9]*$ ]] && warningDays=$WARNING_DAYS
uptimeWait=0
[[ "$UPTIME_WAIT" =~ ^[1-9][0-9]*$ ]] && uptimeWait=$UPTIME_WAIT
uptimeTimeout=3
[[ "$UPTIME_TIMEOUT" =~ ^[1-9][0-9]*$ ]] && uptimeTimeout=$UPTIME_TIMEOUT
uptimeSleep=3
[[ "$UPTIME_SLEEP" =~ ^[1-9][0-9]*$ ]] && uptimeSleep=$UPTIME_SLEEP

uptimeTLS() {
	local server port ip last command code
	server=${1:?servername}
	port=${2:?port}
	ip=${3}
	command=( curl --max-time ${uptimeTimeout} )

	if [[ -n "$ip" ]]; then
		command+=( --resolve $servername:$port:$ip )
	fi

	code=`"${command[@]}" -o /dev/null -w "%{http_code}" -s https://$servername:$port`
	if [[ ",${UPTIME_CODES:-200,202,301,302}," == *",${code:-000},"* ]]; then
		return
	fi

	echo ${code:-000}
}
uptimeSmtp() {
	local server port ip last code
	server=${1:?servername}
	port=${2:?port}
	ip=${3}

	nc -zw3 ${ip:-$server} $port
	code=$?

	if [[ $code -ne 0 ]]; then
		echo $code
	fi
}

uptimeCommand=uptimeTLS
checkUptime() {
	if [[ $uptimeWait -le 0 ]]; then
		return
	fi

	local code
	last=`date +%s`
	while [[ $((`date +%s` - $last)) -lt $uptimeWait ]]; do
		code=`$uptimeCommand "$@"`
		if [[ -z "$code" ]]; then
			return
		fi
		sleep ${uptimeSleep}
	done
	echo ${code:-000}
}

checkEntry() {
	local code
	local entry=${1}
	local fields=(${1//:/ })
	shift
	local servername=${fields[0]}
	if [[ -z "$servername" ]]; then
		errorExitLater Invalid entry $entry
	else
		log Checking entry $entry

		local port=${fields[1]}
		local ip=${fields[2]}
		# omitted port
		[[ -z "$ip" && "$port" =~ ^[0-9]+(.[0-9]+){3}$ ]] && ip=$port && port=
		# error cases
		[[ -n "$port" && ! "$port" =~ ^[0-9]+$ ]] && errorExitLater Invalid entry $entry
		[[ -n "$ip" && ! "$ip" =~ ^[0-9]+(.[0-9]+){3}$ ]] && errorExitLater Invalid entry $entry
		# credit https://stackoverflow.com/a/66921470/3151014

		log Parsed as server name $servername hosted at ${ip:-$servername} on port ${port:-443}

		code=`checkUptime $servername ${port:-443} ${ip}`
		if [[ -n $code ]]; then
			if [[ "$UPTIME_ERROR_IGNORED" == "true" ]]; then
				log "Ignored entry $entry, unreachable/unavailableafter $uptimeWait seconds (code=$code)"
			else
				$writeLog "Entry $entry unreachable/unavailableafter $uptimeWait seconds (code=$code)"
			fi
			return
		fi

		local remainingDays=$(( ($(date -d "$(echo | openssl s_client -servername $servername -connect ${ip:-$servername}:${port:-443} "$@" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)" '+%s') - $(date '+%s')) / 86400 ))

		log $servername certificate is still valid for $remainingDays days
		[[ $remainingDays -le $warningDays ]] && $writeLog $servername certificate is expiring in $remainingDays days
	fi
}

uptimeCommand=uptimeTLS
for entry in $TARGET_DOMAIN_PORT_IPS; do
	checkEntry $entry
done
uptimeCommand=uptimeSmtp
for entry in $SMTP_TARGET_DOMAIN_PORT_IPS; do
	checkEntry $entry -starttls smtp
done

exit $exitCode
